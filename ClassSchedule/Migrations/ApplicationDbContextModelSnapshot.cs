// <auto-generated />
using System;
using ClassSchedule.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassSchedule.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassSchedule.Data.DataModels.DayData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScheduleDataId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("ClassSchedule.Data.DataModels.GroupData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ClassSchedule.Data.DataModels.ScheduleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("LessonData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cabinet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DayDataEvenWeekId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DayDataOddWeekId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayDataEvenWeekId");

                    b.HasIndex("DayDataOddWeekId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ClassSchedule.Data.DataModels.DayData", b =>
                {
                    b.HasOne("ClassSchedule.Data.DataModels.GroupData", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassSchedule.Data.DataModels.ScheduleData", null)
                        .WithMany("Days")
                        .HasForeignKey("ScheduleDataId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ClassSchedule.Data.DataModels.ScheduleData", b =>
                {
                    b.HasOne("ClassSchedule.Data.DataModels.GroupData", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("LessonData", b =>
                {
                    b.HasOne("ClassSchedule.Data.DataModels.DayData", "DayDataEvenWeek")
                        .WithMany("LessonsEvenWeek")
                        .HasForeignKey("DayDataEvenWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClassSchedule.Data.DataModels.DayData", "DayDataOddWeek")
                        .WithMany("LessonsOddWeek")
                        .HasForeignKey("DayDataOddWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DayDataEvenWeek");

                    b.Navigation("DayDataOddWeek");
                });

            modelBuilder.Entity("ClassSchedule.Data.DataModels.DayData", b =>
                {
                    b.Navigation("LessonsEvenWeek");

                    b.Navigation("LessonsOddWeek");
                });

            modelBuilder.Entity("ClassSchedule.Data.DataModels.ScheduleData", b =>
                {
                    b.Navigation("Days");
                });
#pragma warning restore 612, 618
        }
    }
}
